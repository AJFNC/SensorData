// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SensorData.Models;

#nullable disable

namespace SensorData.Migrations
{
    [DbContext(typeof(SensorContext))]
    [Migration("20230310023634_Migration-Inicial")]
    partial class MigrationInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SensorData.Models.Frequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Frl1")
                        .HasColumnType("real");

                    b.Property<float>("Frl2")
                        .HasColumnType("real");

                    b.Property<float>("Frl3")
                        .HasColumnType("real");

                    b.Property<DateTime>("ReadDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Sensor_Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Frequencies");
                });

            modelBuilder.Entity("SensorData.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Ar1")
                        .HasColumnType("integer");

                    b.Property<int>("Ar2")
                        .HasColumnType("integer");

                    b.Property<int>("Ar3")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CalDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("H2o1")
                        .HasColumnType("integer");

                    b.Property<int>("H2o2")
                        .HasColumnType("integer");

                    b.Property<int>("H2o3")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("SensorData.Models.Spot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("A")
                        .HasColumnType("real");

                    b.Property<float?>("B")
                        .HasColumnType("real");

                    b.Property<string>("Lat")
                        .HasColumnType("text");

                    b.Property<string>("Long")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float?>("R2")
                        .HasColumnType("real");

                    b.Property<int>("Sensor_Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Spots");
                });
#pragma warning restore 612, 618
        }
    }
}
