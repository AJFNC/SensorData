@model IEnumerable<SensorData.Models.Frequency>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";

    DateTime PegaHoraBrasilia() => TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.FindSystemTimeZoneById("E. South America Standard Time"));
    //var dateTimeNow = PegaHoraBrasilia().ToLocalTime();

    var labelsModel = "";
    float frl1Model;
    float frl2Model;
    float frl3Model;
    String[]? labelsArray = new String[350];
    float[]? frl1Array = new float[350];
    float[]? frl2Array = new float[350];
    float[]? frl3Array = new float[350];

    float[]? frl1ArrayAvg = new float[350];
    float[]? frl2ArrayAvg = new float[350];
    float[]? frl3ArrayAvg = new float[350];

    float A;
    float B;

    int sensorSpot = 2;
    var index = 0;


    float[] avgFrl1 = new float[10];
    float[] avgFrl2 = new float[10];
    float[] avgFrl3 = new float[10];

    var indexT = 0;

    Frequency[] itemT = new Frequency[350];


    Frequency[] tempItem10 = new Frequency[10];
    Frequency[] tempItemArr = new Frequency[350];

    Frequency[] tempItemArrT = new Frequency[350];

    List<Frequency> freqList = new List<Frequency>();

    var initialHour = 0;
    var initialMinute = 0;


}


<h2>12 horas de leituras de dados</h2>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h2 class="h2">Umidade de solo do sensor (%): SS</h2>
    <div class="btn-toolbar mb-2 mb-md-0">
        <a class="nav-link" asp-area="" asp-controller="Frequencies1" asp-action="Index">Bananas</a>
    </div>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <button type="button" class="btn btn-sm btn-outline-secondary">Compartilhar</button>
            <button type="button" class="btn btn-sm btn-outline-secondary">Exportar</button>
        </div>
        <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle">
            <span data-feather="calendar" class="align-text-bottom"></span>
            Semana
        </button>
    </div>
</div>

<canvas class="my-4 w-100" id="lineChart" width="900" height="380"></canvas>
<div>
    <div class="btn-toolbar mb-2 mb-md-0">
        <a class="nav-link" asp-area="" asp-controller="Frequencies" asp-action="ViewTable">Tabela</a>
    </div>

</div>

<script src="../lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/feather-icons@4.28.0/dist/feather.min.js" integrity="sha384-uO3SXW5IuS1ZpFPKugNNWqTZRRglnUJK6UAZ/gxOX80nxEkN9NcGZTftn6RzhGWE" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js" integrity="sha384-zNy6FEbO50N+Cg5wap8IKA4M/ZnLJgzc6w2NqACZaK0u0FXfOWRRJOnQtpZun8ha" crossorigin="anonymous"></script>

<script src="../lib/bootstrap/dist/css/dashboard.css"></script>
<script src="../lib/bootstrap/dist/css/dashboard.rtl.css"></script>



<script>
    // Graphs
    const ctxA = document.getElementById('lineChart');
    


    createGraphic(ctxA);
    function createGraphic(ctx) {



    @foreach (var item in Model.Where(t => t.ReadDateTime >= PegaHoraBrasilia().AddHours(-18)).Where(t => t.Sensor_Id == sensorSpot).ToList())
        {
            //item.ReadDateTime.AddHours(3);                            //Time correction adding 3 hours
            labelsModel = item.ReadDateTime.AddHours(3).ToString("dd/MM/yyyy HH:mm");     //Time correction adding 3 hours
            frl1Model = item.Frl1;
            frl2Model = item.Frl2;
            frl3Model = item.Frl3;

            labelsArray[index] = labelsModel;
            frl1Array[index] = frl1Model;
            frl2Array[index] = frl2Model;
            frl3Array[index] = frl3Model;
            tempItemArr[index] = item;

            tempItemArrT = tempItemArr;


            index++;
            if (index >= labelsArray.Length)
            {
                break;
            }
        }
    ;


        //// Graphs
        //const ctx = document.getElementById('lineChart');
        // eslint-disable-next-line no-unused-vars
        const myChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: "SS: 0-20",
                    data: [],
                    lineTension: 0,
                    backgroundColor: 'transparent',
                    borderColor: '#008bff',
                    borderWidth: 4,
                    pointBackgroundColor: '#008bff'
                },
                {
                    label: "SS: 20-40",
                    data: [],
                    lineTension: 0,
                    backgroundColor: 'transparent',
                    borderColor: '#ff8b00',
                    borderWidth: 4,
                    pointBackgroundColor: '#ff8b00'
                },
                {
                    label: "SS: 40-60",
                    data: [],
                    lineTension: 0,
                    backgroundColor: 'transparent',
                    borderColor: '#00ff8b',
                    borderWidth: 4,
                    pointBackgroundColor: '#00ff8b'
                },
                {
                    label: "Capacidade de campo SS: 0-20 = 15.181",
                    data: [],
                    lineTension: 0,
                    backgroundColor: 'transparent',
                    borderColor: '#008bff',
                    borderWidth: 1,
                    pointBackgroundColor: '#008bff'
                },
                {
                    label: "Capacidade de campo SS: 20-40 = 9.325",
                    data: [],
                    lineTension: 0,
                    backgroundColor: 'transparent',
                    borderColor: '#ff8b00',
                    borderWidth: 1,
                    pointBackgroundColor: '#ff8b00'
                },
                {
                    label: "Capacidade de campo SS: 40-60 = 10.153",
                    data: [],
                    lineTension: 0,
                    backgroundColor: 'transparent',
                    borderColor: '#00ff8b',
                    borderWidth: 1,
                    pointBackgroundColor: '#00ff8b'
                }
                ]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: false
                        }
                    }]
                },
                legend: {
                    display: true
                }
            }
        });
        var dtLabels = new Array();         //Array Javascript
        var dtFrl1 = new Array();
        var dtFrl2 = new Array();
        var dtFrl3 = new Array();
        var indexJS = 0;
        var fieldCap20 = 15.181;
        var fieldCap40 = 9.325;
        var fieldCap60 = 10.153;


        @for (var i = 0; i < labelsArray.Length; i++)
        {
            if(tempItemArr[i] == null)
            {
                break;
            }

            initialHour = tempItemArr[i].ReadDateTime.Hour;
            initialMinute = tempItemArr[i].ReadDateTime.Minute;

            if (i + 1 >= 350)
                break;

            if (tempItemArr[i + 1] == null)
            {
            
                @:(dtLabels[indexJS] = '@labelsArray[i]');
                @:(dtFrl1[indexJS] = '@frl1Array[i]'.replace(',', '.'));
                @:(dtFrl2[indexJS] = '@frl2Array[i]'.replace(',', '.'));
                @:(dtFrl3[indexJS] = '@frl3Array[i]'.replace(',', '.'));

                break;
            }
            else{
                if (tempItemArr[i + 1].ReadDateTime.Hour <= initialHour)
                {
                    if (tempItemArr[i + 1].ReadDateTime.Minute < initialMinute + 3)
                    {
                        continue;
                    }
                }

            }

            if (i >= 350)
                        break;

            indexT++;


            @:(dtLabels[indexJS] = '@labelsArray[i]');
            @:(dtFrl1[indexJS] = '@frl1Array[i]'.replace(',', '.'));
            @:(dtFrl2[indexJS] = '@frl2Array[i]'.replace(',', '.'));
            @:(dtFrl3[indexJS] = '@frl3Array[i]'.replace(',', '.'));

            @:(indexJS++);

        
        }


            for (let i = 0; i <= dtLabels.length; i++) {
                if (dtLabels[i] == null)
                    break;

                    myChart.data.labels[i] = dtLabels[i];
                    myChart.data.datasets[0].data[i] = dtFrl1[i];
                    myChart.data.datasets[1].data[i] = dtFrl2[i];
                    myChart.data.datasets[2].data[i] = dtFrl3[i];
                    //myChart.data.datasets[3].data[i] = fieldCap20;
                    //myChart.data.datasets[4].data[i] = fieldCap40;
                    //myChart.data.datasets[5].data[i] = fieldCap60;

            }
        myChart.update();
    }



</script>